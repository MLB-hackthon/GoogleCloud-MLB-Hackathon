name: Deploy Frontend

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: mlb-hackathon-448420
  REGION: us-central1
  VM_IP: 34.56.194.81

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Check for backend changes
      id: check-changes
      run: |
        echo "Checking for changes in backend directory..."
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^backend/"; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in backend/"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes in backend/"
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_KEY }}

    - name: Add VM to known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Test connectivity first
        if nc -zv ${{ env.VM_IP }} 22 2>/dev/null; then
          echo "SSH port is reachable"
          ssh-keyscan -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts || {
            echo "Failed to scan host keys. Trying with -T option..."
            ssh-keyscan -T 10 -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts
          }
        else
          echo "Error: Cannot reach SSH port on ${{ env.VM_IP }}"
          # Check if VM is accessible
          ping -c 1 ${{ env.VM_IP }} || echo "VM is not responding to ping"
          exit 1
        fi
        
        # Verify known_hosts file
        if [ -s ~/.ssh/known_hosts ]; then
          echo "Known hosts file created successfully"
          cat ~/.ssh/known_hosts
        else
          echo "Error: Known hosts file is empty"
          exit 1
        fi

    - name: Deploy FastAPI to VM
      id: deploy
      run: |
        echo "Starting backend deployment..."
        ssh ${{ secrets.VM_USER }}@${{ env.VM_IP }} '
          # Debug: Print starting directory
          echo "Starting directory: $(pwd)"
          
          # If we are already in the project directory, just cd to backend
          if [ -d "backend" ]; then
            cd backend
          else
            # Otherwise use the full path
            cd GoogleCloud-MLB-Hackathon/backend
          fi
          
          # Debug: Print current directory and contents
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Debug: Check for docker-compose.yml
          if [ -f "docker-compose.yml" ]; then
            echo "docker-compose.yml found"
          else
            echo "docker-compose.yml not found"
            exit 1
          fi
          
          cp /home/hangzheng_17/.env .
          
          # Create SSL directory if it doesn't exist
          mkdir -p ssl
          
          # Copy SSL certificates (assuming they're stored in secrets)
          echo "${{ secrets.SSL_PRIVATE_KEY }}" > ssl/private.key
          echo "${{ secrets.SSL_CERTIFICATE }}" > ssl/certificate.crt
          
          # Set proper permissions
          chmod 600 ssl/private.key
          chmod 644 ssl/certificate.crt

          ls -la ./
          
          if [[ "${{ steps.check-changes.outputs.has_changes }}" == "true" ]]; then
            echo "Backend changes detected, pulling latest code..."
            git pull origin main
          else
            echo "No backend changes, skipping git pull..."
          fi

          # Verify docker-compose file exists
          if [ ! -f "docker-compose.yml" ]; then
            echo "Error: docker-compose.yml not found!"
            ls -la
            exit 1
          fi
          
          # Always restart the container
          echo "Restarting Docker containers..."
          docker-compose down
          docker system prune -af
          docker-compose up -d
          echo "FastAPI Deployment completed"
        '
        echo "Backend deployment completed successfully"

  frontend-deploy:
    name: Deploy Frontend
    needs: [deploy-backend]  # This makes frontend wait for backend deployment
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean up old builds
      run: |
        # Remove old build artifacts
        rm -rf build/
        rm -rf node_modules/
        
        # Only try to clean up if we have access
        if gcloud projects describe ${{ env.PROJECT_ID }} &>/dev/null; then
          # Clean up old Cloud Build artifacts
          gcloud container images list-tags gcr.io/${{ env.PROJECT_ID }}/mlb-app \
            --format='get(digest)' --filter='timestamp.datetime < -P30D' | \
          while read digest; do
            gcloud container images delete "gcr.io/${{ env.PROJECT_ID }}/mlb-app@${digest}" --quiet --force-delete-tags
          done || true
          
          # Clean up old Cloud Run revisions
          gcloud run revisions list \
            --platform managed \
            --region ${{ env.REGION }} \
            --service mlb-app \
            --format="get(metadata.name)" \
            --filter="metadata.creationTimestamp < -P30D" | \
          while read revision; do
            gcloud run revisions delete $revision --quiet --region ${{ env.REGION }}
          done || true
        fi

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Submit Cloud Build
      run: |
        echo "Starting frontend deployment..."
        gcloud builds submit --config cloudbuild.yaml --project ${{ env.PROJECT_ID }} --async
        sleep 10
        BUILD_STATUS=$(gcloud builds list --limit=1 --format="get(status)")
        echo "Latest build status: $BUILD_STATUS"
        BUILD_ID=$(gcloud builds list --limit=1 --format="get(id)")
        echo "Build URL: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
        echo "Frontend deployment initiated" 